1
1+1
1^3
2^6
v = c(1,4,4,3,2,2,3)
v[c(2,3,4)]
v[2:4]
v[c(2,4,3)]
v[-2]
v=v[-2:-4]
which(v==3)
which.max(v)
which.min()
set.seed(250)
a = runif(3,min=0,max=100)
floor(a)
ceiling(a)
round(a,4)
?rnorm
rnorm(3)
which.min(a)
setwd("F:")
a<-read.csv('E3.csv')
names(a)=c('x1','x2','x3','x4','x5','y')
par(mfrow=c(2,3))
boxplot(x1~y,xlab="y",ylab="x1",data=a)
boxplot(x2~y,xlab="y",ylab="x2",data=a)
boxplot(x3~y,xlab="y",ylab="x3",data=a)
boxplot(x4~y,xlab="y",ylab="x4",data=a)
boxplot(x5~y,xlab="y",ylab="x5",data=a)
glm=glm(y~x1+x2+x3+x4+x5,family=binomial(link=logit),data=a)
summary(glm)
pred=predict(glm,a)
prob=exp(pred)/(1+exp(pred))
y1=1*(prob>0.5)
table(a$y,y1)
confusion(a$y,y1)
install.packages('DAAG')
y1=1*(prob>0.5)
table(a$y,y1)
confusion(a$y,y1)
library('DAAG')
y1=1*(prob>0.5)
table(a$y,y1)
confusion(a$y,y1)
install.packages('quantmod')
install.packages('PerformanceAnalytics')
library('quantmod')
library('PerformanceAnalytics')
getSymbols("AAPL",from="2016-11-1",to="2018-11-1")
aapl.3y=AAPL
chartSeries(aapl.3y,theme='white')
aapl.r=diff(log(aapl.3y$AAPL.Adjusted))
chartSeries(aapl.r,theme='white')
hist(aapl.r,nclass=50)
x=as.numeric(aapl.3y$AAPL.Close)
source("ma.R")
source("ma.R")
ma(x,21)
getSymbols("AAPL",from="2018-05-01",to="2018-11-01")
aapl.6m=AAPL
X=aapl.6m[,1:4]
xx=cbind(as.numeric(X[,1]),as.numeric(X[,2]),as.numeric(X[,3]),as.numeric(X[,4]))
source('ohlc.R')
ohlc_plot(xx,xl="days",yl="price",title="Apple Stock")
getSymbols(c("^GSPC","^VIX"), from = "2007-01-01", to = "2018-12-27")
# 另一种计算日对数收益率的方法, 等价于diff(log(GSPC$GSPC.Adjusted))
GSPC.logret = CalculateReturns(GSPC$GSPC.Adjusted, method="log")
par(mfrow=c(3,1)) # 指令以下三张图表以3*1版式排列在一页上
plot(GSPC$GSPC.Adjusted)
plot(GSPC.logret)
plot(VIX)
getSymbols("GOOG",from="2013-12-27",to="2018-12-27")
g5=GOOG
g5.r=diff(log(g5$GOOG.Adjusted))
g5.r[1]=0 # 将日对数收益值向量第一项的NA值手动改为0
rf.y=0.0298 # 查询得知一年期美国国债年简单收益率为2.98%
n=nrow(g5.r); rf = 5*log(1+rf.y)/n #计算其日对数收益率
(mean(g5.r)-rf)/sd(g5.r) # 按定义计算Sharpe Ratio
SharpeRatio(g5.r, Rf = rf, FUN='StdDev') # 使用内置函数计算Sharpe Ratio
SharpeRatio(g5.r, Rf = rf, FUN='StdDev', annualize='true') # 使用内置函数计算年化Sharpe Ratio
getSymbols("SPY",from="2015-10-27",to="2018-10-27")
spy.3y=SPY
spy.r=diff(log(spy.3y$SPY.Adjusted))
aapl.r[1]=spy.r[1]=0
summary(lm(aapl.r~spy.r)) # 进行CAPM线性模型的估算
cov(spy.r,aapl.r)/var(spy.r) # 另一种计算β的方法
gnp<-read.csv('gnp.csv')
gnp.log=log(gnp$VALUE) # GNP值取对数
gnp.r=diff(gnp.log) # 计算GNP的对数增长率
dim(gnp)
tdx=c(1:253)/4+1947 # 生成正确的时序图x轴坐标
par(mfcol=c(2,2))
plot(tdx, gnp.log, xlab='year', ylab='LOG(GNP)', type='l') # 绘制LOG(GNP)时序图
plot(tdx[2:253], gnp.r, xlab='year', ylab='growth rate', type='l')  # 绘制GNP对数增长率时序图
acf(gnp.r, lag=12) # 计算ACF
pacf(gnp.r, lag=12) # 计算PACF
AR=arima(gnp.r, order=c(3,0,0)) # 根据PACF结果选择合适的自回归模型阶数
AR # 查看自回归模型结果
